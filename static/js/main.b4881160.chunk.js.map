{"version":3,"sources":["PathfindingVisualizer/Node/Node.tsx","algorithms/dfs.tsx","algorithms/bfs.tsx","PathfindingVisualizer/PathfindingVisualizer.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Node","props","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","getUnvisitedNeighbors","node","grid","neighbors","push","length","filter","neighbor","isVisited","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","window","innerWidth","innerHeight","setState","newGrid","getNewGridWithWallToggled","visitedNodesInOrder","i","setTimeout","animateShortestPath","document","getElementById","isDfs","startNode","stack","distance","pop","unvisitedNeighbors","dfs","animateDijkstra","isBfs","queue","shift","Infinity","bfs","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","onClick","visualizeDFS","disabled","visualizeBFS","width","height","rowNums","Math","floor","colNums","console","log","currentRow","createNode","slice","newNode","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4881160.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.scss';\n\nexport interface INodeProps {\n  key: any\n  col: any\n  isFinish: any\n  isStart: any\n  isWall: any\n  mouseIsPressed: any\n  onMouseDown: any\n  onMouseEnter: any\n  onMouseUp: any\n  row: any\n}\n\nexport interface INode {\n  col: number;\n  row: number;\n  isStart: boolean;\n  isFinish: boolean;\n  distance: number;\n  isVisited: boolean;\n  isWall: boolean;\n  previousNode: INode;\n}\nexport default class Node extends Component<INodeProps, any> {\n  constructor(props: INodeProps) {\n    super(props);\n  }\n\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      :isStart\n        ? 'node-start'\n        :isWall\n          ? 'node-wall'\n          :'';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}/>\n    );\n  }\n}\n","import {INode} from '../PathfindingVisualizer/Node/Node';\r\n\r\nexport default function dfs(grid: INode[][], startNode: INode, finishNode: INode) {\r\n  const visitedNodesInOrder = [];\r\n\r\n  const stack = [];\r\n  stack.push(startNode);\r\n  startNode.distance = 0;\r\n\r\n  while (stack.length) {\r\n    const node = stack.pop();\r\n    if (node) {\r\n      if (node.isWall) continue;\r\n      if (!node.isVisited) {\r\n        node.isVisited = true;\r\n      }\r\n      visitedNodesInOrder.push(node);\r\n      if (node === finishNode) {\r\n        return visitedNodesInOrder;\r\n      }\r\n      const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n      for (let neighbor of unvisitedNeighbors) {\r\n        stack.push(neighbor);\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node: INode, grid: INode[][]) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode: INode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import {INode} from '../PathfindingVisualizer/Node/Node';\r\n\r\nexport default function bfs(grid: INode[][], startNode: INode, finishNode: INode) {\r\n  const visitedNodesInOrder: INode[] = [];\r\n\r\n  const queue: INode[] = [startNode];\r\n  startNode.distance = 0;\r\n\r\n  while (queue.length) {\r\n    const node = queue.shift();\r\n    if (node) {\r\n      if (node.isWall) continue;\r\n      if (node.distance === Infinity) return visitedNodesInOrder;\r\n      if (!node.isVisited) node.isVisited = true;\r\n      visitedNodesInOrder.push(node);\r\n      if (node === finishNode) return visitedNodesInOrder;\r\n      const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n      for (let neighbor of unvisitedNeighbors) {\r\n        queue.push(neighbor);\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node: INode, grid: INode[][]) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n","import React, {Component} from 'react';\nimport Node, {INode} from './Node/Node';\nimport dfs, {getNodesInShortestPathOrder} from '../algorithms/dfs';\nimport bfs from '../algorithms/bfs';\n\nimport './PathfindingVisualizer.scss';\n\nconst START_NODE_ROW = 8;\nconst START_NODE_COL = 3;\nconst FINISH_NODE_ROW = 18;\nconst FINISH_NODE_COL =9;\n\nexport default class PathfindingVisualizer extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid(window.innerWidth, window.innerHeight);\n    this.setState({grid});\n  }\n\n  handleMouseDown(row: number, col: number) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row: number, col: number) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder: any, nodesInShortestPathOrder: any) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        // @ts-ignore\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder: any) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        // @ts-ignore\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 10 * i);\n    }\n  }\n\n  visualizeDFS() {\n    const {grid} = this.state;\n    this.setState({isDfs: true});\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeBFS() {\n    const {grid} = this.state;\n    this.setState({isBfs: true});\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <div className=\"grid\">\n          {grid.map((row: INode[], rowIdx: number) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(\n                        row: number, col: number) => this.handleMouseDown(row,\n                        col)}\n                      onMouseEnter={(row: number, col: number) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <div className='buttons'>\n          <div>Drag on grids to create walls</div>\n          <button onClick={() => this.visualizeDFS()} disabled={this.state.isBfs}>\n            Visualize DFS\n          </button>\n          <button onClick={() => this.visualizeBFS()} disabled={this.state.isDfs}>\n            Visualize BFS\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = (width: number, height: number) => {\n  const grid = [];\n  const rowNums = Math.floor(height * 0.7 / 25);\n  const colNums = Math.floor(width * 0.8 / 25);\n  console.log(width, colNums, height, rowNums);\n  for (let row = 0; row < rowNums; row++) {\n    const currentRow = [];\n    for (let col = 0; col < colNums; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col: number, row: number) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid: any, row: number, col: number) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport './App.scss';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}